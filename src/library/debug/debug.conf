
// FORMAT:
// comments start with '//'. Ej: this line is a comment because it starts with '//'.
// <dbg_level> <pulse_start> <pulse_end>
// if <pulse_start> is '-1' then it debugs all pulses.
// if <pulse_end> is not specified the it debugs until the last pulse.
// Ej: 
// 28 5 10 
// debugs level 28 from pulse 5 to pulse 10.

// DBG_NUM_LEVS 200

// global

//0 -1 			// 0. start, finish
//1 -1			// 1. mapping (if it has one)
//2 -1			// 2. fix lits (including three lit)
//3 -1			// 3. sectiond read

// finishing

//4 -1			// 4. FINAL ASSIG (including cir set_result)
//5 -1			// 5. HIT_RETURN after set_result
//6 -1			// 6. ending classes

// dimacs.cpp

//7 -1			// 7. dimacs. fix_lits
//8 -1			// 8. dimacs. three_lits
//9 -1			// 9. 
//10 -1			// 10. dimacs. parse_header
//11 -1			// 11. dimacs. parse_file
//12 -1			// 12. dimacs. init_lit_mapping
//13 -1			// 13. dimacs. init_ccl_mapping

// brain.h

//14 -1			// 14. recoil_to_level
//15 -1			// 15. set_charge

// brain.cpp

//16 -1			// 16. update_fibres
//17 -1			// 17. neu_tunnel_signals
//18 -1			// 18. qua_tunnel_signals
//19 -1			// 19. brn_tunnel_signals
//20 -1			// 20. find_reason_of
//21 -1			// 21. find_reasons
//22 -1			// 22. add_reason
//23 -1			// 23. learn_reasons
//24 -1			// 24. BEFORE RETACT
//25 -1			// 25. conflicts & choice
//26 -1			// 26. add_neuron
//27 -1			// 27. set_result
//28 -1			// 28. set_result HIT ENTER
//29 -1			// 29. add_neuron_from_lits

// dbg_ic.cpp

//30 -1			// 30. dbg_ic_print
//31 -1			// 31. dbg_ic_print (print brain) and HIT RETURN

// brain.cpp

//32 -1			// 32. solve_it. print brain

// support.cpp

//33 -1			// 33. command. print_totals. show batch_stat_laps
//34 -1			// 34. command. print_batch_consec. skip it.
//35 -1			// 35. command. print_stats. skip it
//36 -1			// 36. command. print_stats. print mini stats
//37 -1			// 37. command. init_dbg_conf. set dbg_skip_print_info
//38 -1			// 38. command. init_dbg_conf. set dbg_ic_active
//39 -1			// 39. command. init_dbg_conf. set dbg_ic_after
//40 -1			// 40. command. init_dbg_conf. set dbg_ic_gen_jpg

// dimacs.cpp

//41 -1			// 41. dimacs. calc_f_lit_equal_and
//42 -1			// 42. dimacs. calc_f_lit_equal_or
//43 -1			// 43. dimacs. calc_f_lit_equal_or_of_ands
//44 -1			// 44. dimacs. snf_lits
//45 -1			// 45. dimacs. print snf
 
// finish

//49 -1			// 49. compute
//50 -1			// 50. debug new recoil
//51 -1			// 51. update_targets
//52 -1			// 52. update_targets
//53 -1			// 53. final rsn confl and dotted_trace
//54 -1			// 54. qua not dominated
//55 -1			// 55. fill_reason mots

// sortor

//56 -1			// 56. sortees starting oper_all_stabs
//57 -1			// 57. choose one
//58 -1			// 58. prt sortees
//59 -1			// 59. step sortees (onelit > 0)
//60 -1			// 60. before phase_3 step sortees
//61 -1			// 61. mutual
//62 -1			// 62. step_quas

// brain

//64 -1			// 64. set_charge pos and SRC
//65 -1			// 65. confl find_in_mem
//66 -1			// 66. init tees related
//67 -1			// 67. step sortees (filled == 0)
//68 -1			// 68. chosen rsn
//69 -1			// 69. block add/elim

// skeleton

//70 -1			// 70. CNF at add_clauses_as_chars
//71 -1			// 71. cmp_ccls
//72 -1			// 72. write lock name
//73 -1			// 73. choose variant
//74 -1			// 74. ref write

//75 -1			// 75. dbg sort_all_from

//76 -1			// 76. save cnf

//77 -1			// 77. creating SKL
//78 -1			// 78. saving SKL

//85 -1			// 85. add_clauses_as_chars
//86 -1			// 86. add_clause as chars

//91 -1			// 91. reporting skl err
92 -1			// 92. not canon_equal
//93 -1			// 93. deleting Skel
//94 -1			// 94. loader sha
//95 -1			// 95. delete directory
//96 -1			// 96. canon_equal super of
//97 -1			// 97. canon_equal sub of

//99 -1			// 99. not filler

//100 -1			// 100. full cnf before is_filled

//101 -1 			// 101. dbg not (forced sub of filled)
//102 -1			// 102. dbg not (forced sub of filled)
//103 -1			// 103. dbg not (forced sub of filled)
//104 -1			// 104. dbg dots

//106 -1			// 106. dbg bad saving
//107 -1			// 107. linking
//108 -1			// 108. test_skl
//109 -1			// 109. test_skl

//110 -1			// 110. dbg mutual
//111 -1			// 111. after RETRACT
//112 -1			// 112. dbg neu doms
//113 -1			// 113. replace map
//114 -1			// 114. dbg get cnf

//115 -1			// 115. finding cnf
116 -1			// 116. prt all_cho
 
// NEXT=11

