
// FORMAT:
// comments start with '//'. Ej: this line is a comment because it starts with '//'.
// <dbg_level> <pulse_start> <pulse_end>
// if <pulse_start> is '-1' then it debugs all pulses.
// if <pulse_end> is not specified the it debugs until the last pulse.
// Ej: 
// 28 5 10 
// debugs level 28 from pulse 5 to pulse 10.

// DBG_NUM_LEVS 200

// global

//0 -1 			// 0. start, finish
//1 -1			// 1. KEEP ALL LEARNED (use with ONLY DEDUC or dont)
//2 -1			// 2. ONLY_DEDUC
3 -1			// 3. RUN_VERIF (satex) on writed cnf

// finishing

//4 -1			// 4. NEVER_FIND
//5 -1			// 5. NEVER_WRITE
//6 -1			// 6. ONLY_READ

// dimacs.cpp

//7 -1			// 7. dimacs. fix_lits
//8 -1			// 8. dimacs. three_lits
//9 -1			// 9. dimacs. parse_file
//10 -1			// 10. dimacs. calc_f_lit_equal_and
//11 -1			// 11. dimacs. calc_f_lit_equal_or

// brain.cpp

//12 -1			// 12. test full brn STAB
//13 -1			// 13. brain::deactivate_last_map
//14 -1			// 14. retract_choice
//15 -1			// 15. set_charge
//16 -1			// 16. update_fibres
//17 -1			// 17. neu_tunnel_signals
//18 -1			// 18. receive_psignal
//19 -1			// 19. brn_tunnel_signals
//20 -1			// 20. set_note
//21 -1			// 21. receive_psignal
//22 -1			// 22. add_neuron_from_lits
//23 -1			// 23. learn_reasons
//24 -1			// 24. brn_dbg_compute_binary
//25 -1			// 25. conflicts & choice
//26 -1			// 26. add_neuron
//27 -1			// 27. set_result
//28 -1			// 28. set_result. hit_enter.
//29 -1			// 29. solve_it. print brain
//30 -1			// 30. receive_psignal (after set_charge) qua and SRC
//31 -1			// 31. neu_tunnel_signals. forcing.
//32 -1			// 32. neu_tunnel_signals. filled.
//33 -1			// 33. notekeeper::set_motive_notes. 
//34 -1			// 34. brain::find_result. prt all_cho
//35 -1			// 35. num confl
//36 -1			// 36. print check assig
//37 -1			// 37. create/destroy brain & sort_glb
//38 -1			// 38. analyser::calc_neuromap
//39 -1			// 39. analyser::neuromap_find_analysis // dbg_1
//40 -1			// 40. analysis. PRINT_TRAIL. 

// neuromap

//41 -1			// 41. neuromaps map_prepare_mem_oper
//42 -1			// 42. neuromaps load cols
//43 -1			// 43. neuromaps activ/deactive // dbg1
//44 -1			// 44. neuromaps (#lv > 3) activ/deactive 
//45 -1			// 45. neuromaps update HTML nmp neuromaps activ/deactive 
//46 -1			// 46. neuromaps dbg_prt cy col also in console 
//47 -1			// 47. neuromaps map_oper failure/sucess
//48 -1			// 48. neuromaps prt cnf (guide, tauto, diff) afert prepare
//49 -1			// 49. neuromaps map_oper found cnf
//50 -1			// 50. setup_to_wrt
//51 -1			// 51. deduction::dbg_set_with
//52 -1			// 52. deduction::dbg_set_with
//53 -1			// 53. analyser::neuromap_setup_analysis
//54 -1			// 54. analyser::calc_neuromap. no_lrnd calc_nmp. calc_orig_neuromap
//55 -1			// 55. prop_signal::make_ps_dominated. add_wrt_nmp.

// sortor

//56 -1			// 56. sortees starting oper_all_stabs
//57 -1			// 57. choose one
//58 -1			// 58. sort_from
//59 -1			// 59. sort_me_to
//60 -1			// 60. step_mutual_stabilize_rec. has_diff
//61 -1			// 61. sortor head actv.
//62 -1			// 62. step_quas
//63 -1			// 63. mutual unique
//64 -1			// 64. sort_glb::get_final_cnf

// analizer

//65 -1			// 65. setup analysis. 
//66 -1			// 66. setup analysis. top setup.
//67 -1			// 67. coloring. not_eq_cols
//68 -1			// 68. find choice cicles
//69 -1			// 69. found cicle

// skeleton

//70 -1			// 70. CNF at add_clauses_as_chars
//71 -1			// 71. 
//72 -1			// 72. write lock name
//73 -1			// 73. canon_cnf::prepare_cnf
//74 -1			// 74. ref write
//75 -1			// 75. dbg sort_all_from
//76 -1			// 76. save cnf
//77 -1			// 77. creating SKL
//78 -1			// 78. saving SKL
//79 -1			// 79. load cnf failed
//80 -1			// 80. creating ccl
//81 -1			// 81. destroying ccl
//82 -1			// 82. pop ccl
//83 -1			// 83. push ccl
//84 -1			// 84. LINKING/UNLINKING
//85 -1			// 85. add_clauses_as_chars
//86 -1			// 86. add_clause as chars
//87 -1			// 87. find_skl_path
//89 -1			// 89. cleared free_clauses
//90 -1			// 90. fill with lits
//91 -1			// 91. reporting skl err
//92 -1			// 92. not canon_equal
//93 -1			// 93. deleting skl
//94 -1			// 94. loader sha
//95 -1			// 95. canon_cnf::save_cnf. prt_file. after. (gui_bug)
//96 -1			// 96. canon_equal super of
//97 -1			// 97. canon_equal sub of
//98 -1			// 98. find_skl_path. adding found
//99 -1			// 99. 

// find and write dbg

//100 -1			// 100. find top and stop // dbg_1
//101 -1 			// 101. REPEATED_WRITE
//102 -1			// 102. NMP_TO_WRT // dbg_1
103 -1			// 103. training during find
//104 -1			// 104. 
//105 -1			// 105. 
//106 -1			// 106. 
//107 -1			// 107. 
//108 -1			// 108. 
//109 -1			// 109. 
//110 -1			// 110. 


//111 -1			// 111. 
//112 -1			// 112. 
//113 -1			// 113. 
//114 -1			// 114. 
//115 -1			// 115. 
//116 -1			// 116. 
//117 -1			// 117. 
//118 -1			// 118. 
//119 -1			// 119. 
//120 -1			// 120. 
//121 -1			// 121. 
//122 -1			// 122. 
//123 -1			// 123. 
//124 -1			// 124. 
//125 -1			// 125. 
//126 -1			// 126. 
//127 -1			// 127. 
//128 -1			// 128. 
//129 -1			// 129. 
//130 -1			// 130. 
//131 -1			// 131. 
//132 -1			// 132. 
//133 -1			// 133. 
//134 -1			// 134. 
//135 -1			// 135. 
//136 -1			// 136. 
//137 -1			// 137. 
//138 -1			// 138. 
//139 -1			// 139. 
//140 -1			// 140. 
//141 -1			// 141. 
//142 -1			// 142. prt max num_sub & max_lv
//143 -1			// 143. update monos
//144 -1			// 144. 
//145 -1			// 145. reset kg_dbg_wrt_paths each instance
//146 -1			// 146. update kg_dbg_wrt_paths 
//147 -1			// 147. prt init alerts
//148 -1			// 148. 
//149 -1			// 149. 
//150 -1			// 150. update_htm nmp GRAPH
//151 -1			// 151. update_htm ic GRAPH
//152 -1			// 152. 

// NEXT=11

